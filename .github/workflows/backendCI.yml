# name: Backend CI/CD 

on: [push]

env:
  DATABASE_URL: mysql+mysqlconnector://root:password@127.0.0.1:3306/food_ordering
  DB_DIALECT: mysql
  DB_DRIVER: mysqlconnector
  DB_USERNAME: root
  DB_PASSWORD: password
  DB_HOST: 127.0.0.1
  DB_PORT: 3306
  DB_DATABASE: food_ordering

jobs:
  build:
    runs-on: ubuntu-latest
    services:
     mysql:
      image: mysql:8.0
      env: 
        MYSQL_DATABASE: food_ordering
        MYSQL_ROOT_PASSWORD: password
      ports:
        - 3306:3306
      options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    defaults:
      run:
        working-directory: 'backend'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Apply database migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DB_DIALECT: ${{ env.DB_DIALECT }}
          DB_DRIVER: ${{ env.DB_DRIVER }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_DATABASE: ${{ env.DB_DATABASE }}
        run: |
          # Add commands here to apply database migrations if applicable
          alembic -x database_url=$DATABASE_URL upgrade head

      - name: Run pytest for unit testing
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          DB_DIALECT: ${{ env.DB_DIALECT }}
          DB_DRIVER: ${{ env.DB_DRIVER }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_DATABASE: ${{ env.DB_DATABASE }}
        run: |
          pytest app/test/

      - name: Get changed Python files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only origin/dev...HEAD -- '*.py')
          echo "::set-output name=changed_files::$CHANGED_FILES"

      - name: Run pylint for linting
        run: |
          cd ..
          CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES" | xargs pylint
          fi
      
      - name: Run Bandit for SAST
        run: |
          cd ..
          CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES" | xargs bandit -c bandit.yaml -r
          fi
